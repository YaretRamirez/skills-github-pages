<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Crypto Coin Flip App</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f8f9fa;
      margin: 0;
    }

    .app-container {
      max-width: 400px;
      margin: auto;
      padding: 20px;
      background: #ffffff;
      border-radius: 10px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .navbar {
      display: flex;
      justify-content: space-between;
      background-color: #007bff;
      color: white;
      padding: 10px 20px;
      border-radius: 10px;
    }

    .navbar h1 {
      font-size: 18px;
      margin: 0;
    }

    .coin {
      margin: 20px auto;
      width: 150px;
      height: 150px;
      animation: spin 1s linear infinite;
    }

    .spinning {
      animation: spin 1s infinite linear;
    }

    @keyframes spin {
      0% { transform: rotateY(0deg); }
      50% { transform: rotateY(180deg); }
      100% { transform: rotateY(360deg); }
    }

    .btn-primary {
      background-color: #007bff;
      border: none;
    }

    .btn-primary:hover {
      background-color: #0056b3;
    }

    .history {
      margin-top: 20px;
    }

    .history-item {
      padding: 10px;
      border-bottom: 1px solid #ddd;
    }
  </style>
</head>
<body>
  <div class="app-container">
    <!-- Navbar -->
    <div class="navbar">
      <h1>Crypto Coin Flip</h1>
      <button id="connectWallet" class="btn btn-light btn-sm">Connect Wallet</button>
    </div>

    <!-- Wallet Address -->
    <div id="walletAddress" class="text-center my-3"></div>

    <!-- Coin Flip Section -->
    <div id="gameContainer" class="text-center" style="display: none;">
      <h2>Place Your Bet</h2>
      <input id="betAmount" class="form-control my-2" type="number" placeholder="Enter your bet (2-5 SOL)">
      <button id="flipButton" class="btn btn-primary btn-block">Flip Coin</button>
      <div id="errorMessage" class="text-danger mt-2"></div>
      <img id="coinImage" class="coin" src="https://upload.wikimedia.org/wikipedia/commons/1/1f/US_%241_Coin_Obverse.png" alt="Heads">
      <div id="result" class="mt-3 text-success"></div>
    </div>

    <!-- History Section -->
    <div class="history">
      <h3>Transaction History</h3>
      <div id="historyList">
        <p class="text-muted">No transactions yet.</p>
      </div>
    </div>
  </div>

  <script>
    let walletAddress = null;
    const historyList = document.getElementById("historyList");

    // Connect to Phantom Wallet
    document.getElementById("connectWallet").addEventListener("click", async () => {
      if (window.solana && window.solana.isPhantom) {
        try {
          const response = await window.solana.connect({ onlyIfTrusted: false });
          walletAddress = response.publicKey.toString();
          document.getElementById("walletAddress").textContent = `Wallet Connected: ${walletAddress}`;
          document.getElementById("gameContainer").style.display = "block";
        } catch (error) {
          alert("Failed to connect to the wallet. Please try again.");
          console.error("Wallet connection failed:", error);
        }
      } else {
        alert("Phantom Wallet not found! Please install Phantom Wallet.");
      }
    });

    // Flip Coin Game Logic
    document.getElementById("flipButton").addEventListener("click", () => {
      const betAmount = parseFloat(document.getElementById("betAmount").value);
      const errorMessage = document.getElementById("errorMessage");
      const resultElement = document.getElementById("result");
      const coinImage = document.getElementById("coinImage");

      errorMessage.textContent = "";
      resultElement.textContent = "";

      // Validate Bet Amount
      if (isNaN(betAmount) || betAmount < 2 || betAmount > 5) {
        errorMessage.textContent = "Invalid bet amount. Enter a value between 2 and 5 SOL.";
        return;
      }

      // Coin flip animation
      coinImage.classList.add("spinning");
      setTimeout(() => {
        const isHeads = Math.random() < 0.5;
        coinImage.classList.remove("spinning");

        if (isHeads) {
          resultElement.textContent = "Heads! You win!";
          coinImage.src = "https://upload.wikimedia.org/wikipedia/commons/1/1f/US_%241_Coin_Obverse.png";
          coinImage.alt = "Heads";
        } else {
          resultElement.textContent = "Tails! You lose!";
          coinImage.src = "https://upload.wikimedia.org/wikipedia/commons/9/94/US_%241_Coin_Reverse.png";
          coinImage.alt = "Tails";
        }

        // Add to transaction history
        const historyItem = document.createElement("div");
        historyItem.className = "history-item";
        historyItem.textContent = `Bet: ${betAmount} SOL | Result: ${isHeads ? "Heads (Win)" : "Tails (Loss)"}`;
        historyList.appendChild(historyItem);
      }, 1000);
    });
  </script>
</body>
</html>
